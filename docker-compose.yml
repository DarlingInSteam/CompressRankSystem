version: '3.8'

services:
  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MinIO object storage
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console port
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 3

  # Storage Service
  image-storage-service:
    build:
      context: ./ImageStorageService
      dockerfile: Dockerfile
    container_name: image-storage-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_RABBITMQ_HOST=rabbitmq
      - MINIO_ENDPOINT=http://minio:9000
      - WEBP_BINARY_PATH=/app/webp_binaries
    volumes:
      - ./data:/app/data
      - ./webp_binaries:/app/webp_binaries
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy

  # Compression Service
  compression-service:
    build:
      context: ./CompressionService
      dockerfile: Dockerfile
    container_name: compression-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_RABBITMQ_HOST=rabbitmq
      - STORAGE_SERVICE_URL=http://image-storage-service:8081
      - WEBP_BINARY_PATH=/app/webp_binaries
    volumes:
      - ./data:/app/data
      - ./webp_binaries:/app/webp_binaries
    depends_on:
      - image-storage-service

  # Frontend
  admin-panel:
    build:
      context: ./admin-panel
      dockerfile: Dockerfile
    container_name: admin-panel
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8080 # For browser access from host machine
    depends_on:
      - compression-service

volumes:
  rabbitmq_data:
  minio_data: